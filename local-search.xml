<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RISC-V timer 在 Linux 中的实现</title>
    <link href="/2022/05/01/riscv-linux-timer/"/>
    <url>/2022/05/01/riscv-linux-timer/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Author:  Yu Liao <a href="mailto:&#x79;&#117;&#x6c;&#x69;&#x61;&#111;&#48;&#x32;&#49;&#52;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x79;&#117;&#x6c;&#x69;&#x61;&#111;&#48;&#x32;&#49;&#52;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a><br>Revisor: lzufalcon <a href="mailto:&#x66;&#97;&#108;&#99;&#111;&#x6e;&#64;&#x74;&#105;&#110;&#x79;&#x6c;&#97;&#98;&#x2e;&#111;&#114;&#103;">&#x66;&#97;&#108;&#99;&#111;&#x6e;&#64;&#x74;&#105;&#110;&#x79;&#x6c;&#97;&#98;&#x2e;&#111;&#114;&#103;</a><br>Project: <a href="https://gitee.com/tinylab/riscv-linux">RISC-V Linux 内核剖析</a></p></blockquote><h2 id="RISC-V-timer-相关寄存器"><a href="#RISC-V-timer-相关寄存器" class="headerlink" title="RISC-V timer 相关寄存器"></a>RISC-V timer 相关寄存器</h2><h3 id="mtime-amp-mtimecmp-寄存器"><a href="#mtime-amp-mtimecmp-寄存器" class="headerlink" title="mtime &amp; mtimecmp 寄存器"></a>mtime &amp; mtimecmp 寄存器</h3><p>按照 RISC-V 定义，系统需要提供两个 64 位的 M 模式寄存器 <code>mtime</code> 和 <code>mtimecmp</code>，并通过 MMIO 方式映射到地址空间。</p><p><code>mtime</code> 需要以固定的频率递增，并在发生溢出时回绕。当 <code>mtime</code> 大于或等于 <code>mtimecmp</code> 时，由核内中断控制器 (CLINT, Core-Local Interrupt Controller) 产生 timer 中断。中断的使能由 <code>mie</code> 寄存器中的 <code>MTIE</code> 和 <code>STIE</code> 位控制，<code>mip</code> 中的 <code>MPIE</code> 和 <code>SPIE</code> 则指示了 timer 中断是否处于 pending。在 RV32 中读取 <code>mtimecmp</code> 结果为低 32 位， <code>mtimecmp</code> 的高 32 位需要读取 <code>mtimecmph</code> 得到。</p><p>在 <a href="https://github.com/riscv/riscv-isa-manual/releases/download/Ratified-IMAFDQC/riscv-spec-20191213.pdf">RISC-V 特权 ISA 规范</a> 的 3.2.1 Machine Timer Registers (mtime and mtimecmp) 中详细介绍了这部分。</p><h3 id="time-CSR"><a href="#time-CSR" class="headerlink" title="time CSR"></a>time CSR</h3><p>RISC-V 还定义了一个 64 位非特权 CSR 寄存器 <code>time</code>，<code>time</code> 计数器是前面提到的 <code>mtime</code> 的只读映射。同样，在 RV32 中 <code>timeh</code> CSR 是 <code>mtime</code> 高 32 位的只读映射，对于 M 模式和 S 模式它们都是可读写的。</p><p>在 <a href="https://github.com/riscv/riscv-isa-manual/releases/download/Ratified-IMAFDQC/riscv-spec-20191213.pdf">RISC-V 特权 ISA 规范</a> 的 2.2 CSR Listing 和 3.1.11 Machine Counter-Enable Register (mcounteren) 可以找到这块的规范。</p><h3 id="htimedelta-amp-htimedeltah-寄存器"><a href="#htimedelta-amp-htimedeltah-寄存器" class="headerlink" title="htimedelta &amp; htimedeltah 寄存器"></a>htimedelta &amp; htimedeltah 寄存器</h3><p>在增加虚拟化扩展以后，特权模式会发生一定变化，如下图（来源于参考文档 5）所示：</p><p><img src="/img/riscv-privilege-mode.png" alt="RISC-V 虚拟化特权模式"></p><p>相应地，timer 支持也进行了如下扩展：</p><p><code>htimedelta</code> 和 <code>htimedeltah</code> 是 Hypervisor 扩展里的 CSR，在 VS&#x2F;VU 模式下读取 <code>time</code> 结果是真正的 host 中的 <code>time</code> 加上 <code>htimedelta</code>。同样的，对于 RV32 <code>htimedelta</code> 保存了低 32 位，高 32 位保存在 <code>htimedeltah</code>。</p><p>在 <a href="https://github.com/riscv/riscv-isa-manual/releases/download/Ratified-IMAFDQC/riscv-spec-20191213.pdf">RISC-V 特权 ISA 规范</a> 的 8.2.7  Hypervisor Time Delta Registers (htimedelta, htimedeltah) 中详细介绍了这部分。</p><h3 id="Sstc-扩展"><a href="#Sstc-扩展" class="headerlink" title="Sstc 扩展"></a>Sstc 扩展</h3><p>由于 <code>mtimecmp</code> 只能在 M 模式下访问，对于 S&#x2F;HS 模式下的内核和 VU&#x2F;VS 模式下的虚拟机需要通过 SBI 才能访问，会造成较大的中断延迟和性能开销。为了解决这一问题，RISC-V 新增了 Sstc 拓展支持（已批准但尚未最终集成到规范中）。</p><p>Sstc 扩展为 HS 模式和 VS 模式分别新增了 <code>stimecmp</code> 和 <code>vstimecmp</code> 寄存器，当 $time &gt;&#x3D; stimecmp$  (HS)或 $time+htimedelta &gt;&#x3D; vstimecmp$  (VS)时会产生 timer 中断，不再需要通过 SBI 陷入其他模式。</p><p>详见 <a href="https://github.com/riscv/riscv-time-compare/releases/download/v0.5.4/Sstc.pdf">RISC-V “stimecmp &#x2F; vstimecmp” 扩展</a> 。</p><h2 id="Linux-timer-实现"><a href="#Linux-timer-实现" class="headerlink" title="Linux timer 实现"></a>Linux timer 实现</h2><p>Linux 将底层时钟硬件抽象为两类设备：clockevent 和 clocksource，前者用来在未来指定的时间产生中断，通常用作定时器；后者则用于维护自系统启动以来所经过的时间。</p><p>当前 Linux 为 RISC-V 根据内核运行模式实现了两套驱动，代码路径为 drivers&#x2F;clocksource&#x2F;timer-riscv.c 和 drivers&#x2F;clocksource&#x2F;timer-clint.c。</p><p>本文代码基于最新的 Linux v5.18-rc4 和 OpenSBI v1.0，截止目前 Linux 对 Sstc 扩展的支持还没有合入主线内核，社区已有相关补丁：<a href="https://lkml.org/lkml/2022/3/4/1175">Add Sstc extension support</a>。</p><p><code>mtime</code> 频率由设备树 CPU 节点中的 timebase-frequency 定义，不同平台都各不相同，如 Kendryte K210 的频率是 7.8 MHz，平头哥 C910 的频率是 3 MHz，SiFive Unmatched A00 频率为 1 MHz。</p><h3 id="NoMMU-timer-clint-c"><a href="#NoMMU-timer-clint-c" class="headerlink" title="NoMMU timer-clint.c"></a>NoMMU timer-clint.c</h3><p>timer-clint.c 驱动适用于 NoMMU 系统，内核运行在 M 模式下，通过 CONFIG_CLINT_TIMER 使能该驱动。RV64 下 clocksource 是通过直接读取 <code>mtime</code> 寄存器实现的，RV32 系统需要分两次读取，并需要考虑产生进位的情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_64BIT</span><br><span class="hljs-type">static</span> u64 notrace <span class="hljs-title function_">clint_get_cycles64</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> clint_get_cycles();<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> <span class="hljs-comment">/* CONFIG_64BIT */</span></span><br><span class="hljs-type">static</span> u64 notrace <span class="hljs-title function_">clint_get_cycles64</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    u32 hi, lo;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        hi = clint_get_cycles_hi();<br>        lo = clint_get_cycles();<br>    &#125; <span class="hljs-keyword">while</span> (hi != clint_get_cycles_hi());<br><br>    <span class="hljs-keyword">return</span> ((u64)hi &lt;&lt; <span class="hljs-number">32</span>) | lo;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* CONFIG_64BIT */</span></span><br></code></pre></td></tr></table></figure><p><code>clint_get_cycles/clint_get_cycles_hi</code> 直接通过内存访问寄存器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_64BIT</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> clint_get_cycles()  readq_relaxed(clint_timer_val)</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> clint_get_cycles()  readl_relaxed(clint_timer_val)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> clint_get_cycles_hi()   readl_relaxed(((u32 *)clint_timer_val) + 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><p>clockevent 是通过使能 <code>mie</code> 的 TIMER 中断，并向 <code>mtimecmp</code> 寄存器写入期望的计数值实现的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">clint_clock_next_event</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> delta,</span><br><span class="hljs-params">                   <span class="hljs-keyword">struct</span> clock_event_device *ce)</span><br>&#123;<br>    <span class="hljs-type">void</span> __iomem *r = clint_timer_cmp +<br>              cpuid_to_hartid_map(smp_processor_id());<br><br>    csr_set(CSR_IE, IE_TIE);<br>    writeq_relaxed(clint_get_cycles64() + delta, r);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MMU-timer-riscv-c"><a href="#MMU-timer-riscv-c" class="headerlink" title="MMU timer-riscv.c"></a>MMU timer-riscv.c</h3><p>timer-riscv.c 驱动适用于有 MMU 的场景，内核运行在 S&#x2F;HS 模式下，通过 CONFIG_RISCV_TIMER 可以使能该驱动。和 timer-riscv.c 的驱动相比，本质上也是访问 <code>mtime</code> 和 <code>mtimecmp</code> 寄存器，不过由于 S 模式下无法直接访问它们，需要通过其他方式间接完成。</p><p>RV64 的 clocksource 是通过 csrr 直接读取 <code>time</code> 寄存器实现的；在 RV32 系统由于一条指令无法读完，需要分两次读取 <code>time</code> 和 <code>timeh</code>， 并考虑可能发生进位的情况。前面提到 <code>time</code> 和 <code>timeh</code> 这两个 CSR 是 <code>mtime</code> 寄存器的映射，因此频率与精度和 <code>mtime</code> 是一致的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_64BIT</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> u64 <span class="hljs-title function_">get_cycles64</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> get_cycles();<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> <span class="hljs-comment">/* CONFIG_64BIT */</span></span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> u64 <span class="hljs-title function_">get_cycles64</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    u32 hi, lo;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        hi = get_cycles_hi();<br>        lo = get_cycles();<br>    &#125; <span class="hljs-keyword">while</span> (hi != get_cycles_hi());<br><br>    <span class="hljs-keyword">return</span> ((u64)hi &lt;&lt; <span class="hljs-number">32</span>) | lo;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* CONFIG_64BIT */</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">cycles_t</span> <span class="hljs-title function_">get_cycles</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> csr_read(CSR_TIME);<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> u32 <span class="hljs-title function_">get_cycles_hi</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> csr_read(CSR_TIMEH);<br>&#125;<br></code></pre></td></tr></table></figure><p>clockevent 则是通过 SBI 间接访问 <code>mtimecmp</code> 实现的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">riscv_clock_next_event</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> delta,</span><br><span class="hljs-params">        <span class="hljs-keyword">struct</span> clock_event_device *ce)</span><br>&#123;<br>    csr_set(CSR_IE, IE_TIE);<br>    sbi_set_timer(get_cycles64() + delta);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里以 OpenSBI 来分析，如果不支持 Sstc 扩展则调用在 SBI 中注册的 <code>timer_event_start</code> 函数写入 <code>mtimecmp</code>，这个需要具体平台自己去实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sbi_timer_event_start</span><span class="hljs-params">(u64 next_event)</span><br>&#123;<br>    sbi_pmu_ctr_incr_fw(SBI_PMU_FW_SET_TIMER);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Update the stimecmp directly if available. This allows</span><br><span class="hljs-comment">     * the older software to leverage sstc extension on newer hardware.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (sbi_hart_has_feature(sbi_scratch_thishart_ptr(), SBI_HART_HAS_SSTC)) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __riscv_xlen == 32</span><br>        csr_write(CSR_STIMECMP, next_event &amp; <span class="hljs-number">0xFFFFFFFF</span>);<br>        csr_write(CSR_STIMECMPH, next_event &gt;&gt; <span class="hljs-number">32</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>        csr_write(CSR_STIMECMP, next_event);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (timer_dev &amp;&amp; timer_dev-&gt;timer_event_start) &#123;<br>        timer_dev-&gt;timer_event_start(next_event);<br>        csr_clear(CSR_MIP, MIP_STIP);<br>    &#125;<br>    csr_set(CSR_MIE, MIP_MTIP);<br>&#125;<br></code></pre></td></tr></table></figure><p>在支持 Sstc 扩展后，可以直接访问 <code>stimecmp</code> 寄存器，避免通过 SBI 调用的方式产生的开销。社区已开展相关工作：<a href="https://lore.kernel.org/all/20220426185245.281182-1-atishp@rivosinc.com/">RISC-V: Prefer sstc extension if available</a>。</p><h3 id="KVM-vcpu-timer-c"><a href="#KVM-vcpu-timer-c" class="headerlink" title="KVM vcpu_timer.c"></a>KVM vcpu_timer.c</h3><p>在 VS 模式下读取 <code>time</code> 时，KVM 会返回真正的 <code>time</code> 加上 <code>htimedelta</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> u64 <span class="hljs-title function_">kvm_riscv_current_cycles</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kvm_guest_timer *gt)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> get_cycles64() + gt-&gt;time_delta;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 VS 模式下设置 <code>mtimecmp</code> 时，KVM 会开启一个已经创建好的高精度定时器，并把定时器的到期时间设置为写入 <code>mtimecmp</code> 值对应的 ns。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">kvm_riscv_vcpu_timer_next_event</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kvm_vcpu *vcpu, u64 ncycles)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kvm_vcpu_timer</span> *<span class="hljs-title">t</span> =</span> &amp;vcpu-&gt;arch.timer;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kvm_guest_timer</span> *<span class="hljs-title">gt</span> =</span> &amp;vcpu-&gt;kvm-&gt;arch.timer;<br>    u64 delta_ns;<br><br>    <span class="hljs-keyword">if</span> (!t-&gt;init_done)<br>        <span class="hljs-keyword">return</span> -EINVAL;<br><br>    kvm_riscv_vcpu_unset_interrupt(vcpu, IRQ_VS_TIMER);<br><br>    delta_ns = kvm_riscv_delta_cycles2ns(ncycles, gt, t);<br>    t-&gt;next_cycles = ncycles;<br>    hrtimer_start(&amp;t-&gt;hrt, ktime_set(<span class="hljs-number">0</span>, delta_ns), HRTIMER_MODE_REL);<br>    t-&gt;next_set = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在定时器到期后，KVM 会为 Guest 产生 TIMER 中断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">enum</span> hrtimer_restart <span class="hljs-title function_">kvm_riscv_vcpu_hrtimer_expired</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> hrtimer *h)</span><br>&#123;<br>    u64 delta_ns;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kvm_vcpu_timer</span> *<span class="hljs-title">t</span> =</span> container_of(h, <span class="hljs-keyword">struct</span> kvm_vcpu_timer, hrt);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kvm_vcpu</span> *<span class="hljs-title">vcpu</span> =</span> container_of(t, <span class="hljs-keyword">struct</span> kvm_vcpu, arch.timer);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kvm_guest_timer</span> *<span class="hljs-title">gt</span> =</span> &amp;vcpu-&gt;kvm-&gt;arch.timer;<br><br>    <span class="hljs-keyword">if</span> (kvm_riscv_current_cycles(gt) &lt; t-&gt;next_cycles) &#123;<br>        delta_ns = kvm_rizscv_delta_cycles2ns(t-&gt;next_cycles, gt, t);<br>        hrtimer_forward_now(&amp;t-&gt;hrt, ktime_set(<span class="hljs-number">0</span>, delta_ns));<br>        <span class="hljs-keyword">return</span> HRTIMER_RESTART;<br>    &#125;<br><br>    t-&gt;next_set = <span class="hljs-literal">false</span>;<br>    kvm_riscv_vcpu_set_interrupt(vcpu, IRQ_VS_TIMER);<br><br>    <span class="hljs-keyword">return</span> HRTIMER_NORESTART;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此 VS 模式设置时钟事件需要通过 SBI 调用进入 HS 模式然后再进入 M 模式，会产生较大的开销。同样，在支持 Sstc 扩展后，可以直接访问 <code>vstimecmp</code> 并产生 timer 中断，社区目前已经开展了相关的工作：<a href="https://lore.kernel.org/all/20220426185245.281182-4-atishp@rivosinc.com/">RISC-V: KVM: Support sstc extension</a>。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://github.com/riscv/riscv-platform-specs/blob/main/riscv-platform-spec.adoc/">RISC-V Platform</a></li><li><a href="https://riscv.org/technical/specifications/">RISC-V ISA Specification</a></li><li><a href="https://github.com/riscv/riscv-time-compare/releases/download/v0.5.4/Sstc.pdf">RISC-V “stimecmp &#x2F; vstimecmp” Extension</a></li><li>基于 FPGA 与 RISC-V 的嵌入式系统设计</li><li><a href="https://static.sched.com/hosted_files/osseu19/4e/Xvisor_Embedded_Hypervisor_for_RISCV_v5.pdf">RISC-V虚拟化扩展</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux Kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RISC-V</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
